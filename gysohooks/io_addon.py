import os
from typing import BinaryIO
from mitmproxy import io, http
from mitmproxy.exceptions import FlowReadException
"""
Generate a mitmproxy dump file.

This script demonstrates how to generate a mitmproxy dump file,
as it would also be generated by passing `-w` to mitmproxy.
In contrast to `-w`, this gives you full control over which
flows should be saved and also allows you to rotate files or log
to multiple files in parallel.
"""
"""
Read a mitmproxy dump file.
"""

FLOW_CACHE = set[http.HTTPFlow]()
folder_path = "./data"
dumps_file_name = folder_path + "/dumps.data"
history_file_name = folder_path + "/history.data"


def checkout_data_dir():
    # 创建文件夹
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    # 创建文件
    if not os.path.exists(dumps_file_name):
        with open(dumps_file_name, "w+") as f:
            # 可以在这里写入文件内容，如果需要的话
            pass


checkout_data_dir()


class GysoHooksIO:
    url_set = set[str]()
    def __init__(self) -> None:
        self.f: BinaryIO = open(dumps_file_name, "wb")
        self.w = io.FlowWriter(self.f)

    def response(self, flow: http.HTTPFlow) -> None:
        # print(str(flow))
        FLOW_CACHE.add(flow)


    def dumps_as_to_file(self):
        for flow in FLOW_CACHE:
            self.w.add(flow)

    def load_history_file(self):
        FLOW_CACHE.clear()
        self.url_set.clear()
        with open(history_file_name, "rb") as logfile:
            freader = io.FlowReader(logfile)
            # pp = pprint.PrettyPrinter(indent=4)
            try:
                for f in freader.stream():
                    if isinstance(f, http.HTTPFlow):
                        if f.request.pretty_url not in self.url_set:
                            FLOW_CACHE.add(f)
                            self.url_set.add(f.request.pretty_url)
                            print(f'loaded ---- {f.id} : {f.request.host}')
                    # pp.pprint(f.get_state())

            except FlowReadException as e:
                print(f"Flow file corrupted: {e}")

    def clear_cache(self):
        FLOW_CACHE.clear()

    def done(self):

        FLOW_CACHE.clear()
        self.f.close()

import json
from current_addon import SnapInfo
from mitmproxy import io, http
from mitmproxy.exceptions import FlowReadException
"""
Generate a mitmproxy dump file.

This script demonstrates how to generate a mitmproxy dump file,
as it would also be generated by passing `-w` to mitmproxy.
In contrast to `-w`, this gives you full control over which
flows should be saved and also allows you to rotate files or log
to multiple files in parallel.
"""
"""
Read a mitmproxy dump file.
"""

HISTORY_CACHE = dict()
folder_path = "./data"
history_file_name = folder_path + "/history.data"
url_set = set[str]()


def clear_history_cache():
    url_set.clear()
    HISTORY_CACHE.clear()
    try:
        with open(history_file_name, "wb+") as f:
            pass

    except OSError as e:
        print(f"e clear_history_cache error {str(e)}")


def append_flow_to_history(flow: http.HTTPFlow):
    try:
        with open(history_file_name, "ab+") as f:
            stream = io.FlowWriter(f)
            stream.add(flow)

    except OSError as e:
        print(f"e append_flow_to_history error {str(e)}")


def save_upload_file(file):
    file.save(history_file_name)


def get_history_detail(flow: http.HTTPFlow):
    uid = flow.id
    try:
        content = flow.request.content.decode('utf-8', 'ignore')
    except UnicodeDecodeError:
        content = "[(⊙o⊙)…， 这个数据抓包工具不能解析, 而不是没有request Body数据]"
        print("Failed request decoded!! UnicodeDecodeError")

    request_info = {
        'type': 'request',
        'uuid': uid,
        'url': flow.request.url,
        'http_version': flow.request.http_version,
        'headers': dict(flow.request.headers),
        'content': content,
        'timestamp_start': flow.request.timestamp_start,
        'timestamp_end': flow.request.timestamp_end,
        'host': flow.request.host,
        'port': flow.request.port,
        'method': flow.request.method,
        'scheme': flow.request.scheme,
        'authority': flow.request.authority,
        'path': flow.request.path,
    }

    request_time = flow.request.timestamp_start
    response_time = flow.response.timestamp_end
    time_diff = response_time - request_time

    try:
        content = flow.response.content.decode()
    except UnicodeDecodeError:
        content = "[(⊙o⊙)…， 这个数据抓包工具不能解析, 而不是没有response Body数据]"
        print("Failed request decoded!! UnicodeDecodeError")

    response_info = {
        'type': 'response',
        'uuid': uid,
        'url': flow.request.url,
        'status_code': flow.response.status_code,
        'http_version': flow.response.http_version,
        'reason': flow.response.reason,
        'headers': dict(flow.response.headers),
        'content': content,
        'timestamp': str(response_time),
        'time_diff': str(time_diff),
        'timestamp_start': flow.response.timestamp_start,
        'timestamp_end': flow.response.timestamp_end,
    }
    result = {'uid': flow.id,
              'code': 0,
              'request': request_info,
              'response': response_info,
              'error_msg': ''}
    return json.dumps(result)


def get_history_detail_as_json(uid):
    if uid in HISTORY_CACHE:
        flow = HISTORY_CACHE[uid]
        return get_history_detail(flow)
    else:
        print(f'get error history uid={uid}')
        return json.dumps({
            'code': 1,
            'uid': uid,
            'snap': '',
            'request': '',
            'response': '',
            'error_msg': ''
        })


def get_history_list():
    HISTORY_CACHE.clear()
    url_set.clear()
    with open(history_file_name, "rb") as logfile:
        reader = io.FlowReader(logfile)
        # pp = pprint.PrettyPrinter(indent=4)
        try:
            for f in reader.stream():
                if isinstance(f, http.HTTPFlow):
                    if f.request.pretty_url not in url_set:
                        HISTORY_CACHE[f.id] = f
                        url_set.add(f.request.pretty_url)
                        print(f'loaded ---- {f.id} : {f.request.host}')
        except FlowReadException as e:
            print(f"Flow file corrupted: {e}")

    snap_list = []
    for uid in HISTORY_CACHE:
        flow = HISTORY_CACHE[uid]
        s = SnapInfo(flow.id, flow.request.method, flow.request.pretty_url)
        snap_list.append(s.to_dict())
    return json.dumps(snap_list)


def history_copy_and_create_target_url(data):
    uid: str = data['uid']
    target_url: str = data['targetUrl']
    flow: http.HTTPFlow = HISTORY_CACHE[uid]
    new_flow: http.HTTPFlow = flow.copy()
    new_flow.request.url = target_url
    snap = SnapInfo(new_flow.id, new_flow.request.method, new_flow.request.pretty_url)
    HISTORY_CACHE[new_flow.id] = new_flow
    print(f'history_copy_and_create_target_url old {str(flow)}')
    print(f'history_copy_and_create_target_url new {str(new_flow)}')
    append_flow_to_history(new_flow)
    return snap.to_json()
